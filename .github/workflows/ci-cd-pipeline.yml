name: Arabic VoC Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security & Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install safety bandit semgrep
    
    - name: Run Safety (dependency vulnerability scan)
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run Bandit (security linting)
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Semgrep (SAST)
      run: |
        python -m semgrep --config=auto app/ --json --output=semgrep-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  code-quality:
    name: Code Quality & Standards
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install quality tools
      run: |
        pip install flake8 black isort mypy pylint
        pip install -r requirements.txt
    
    - name: Run Black (code formatting)
      run: black --check --diff app/
    
    - name: Run isort (import sorting)
      run: isort --check-only --diff app/
    
    - name: Run Flake8 (linting)
      run: flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy (type checking)
      run: mypy app/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run custom quality checks
      run: python tools/code_quality/check_quality.py

  testing:
    name: Comprehensive Testing Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: arabicvoc_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost/arabicvoc_test
        OPENAI_API_KEY: test-key
        SECRET_KEY: test-secret-key
      run: |
        export FLASK_ENV=testing
        python -c "from app.main import create_app; app = create_app(); app.app_context().push()"
    
    - name: Run unit tests
      run: pytest testing/unit/ -v --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost/arabicvoc_test
        OPENAI_API_KEY: test-key
    
    - name: Run integration tests
      run: pytest testing/integration/ -v
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost/arabicvoc_test
        OPENAI_API_KEY: test-key
    
    - name: Run performance tests
      run: pytest testing/performance/ -v --timeout=300
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost/arabicvoc_test
        OPENAI_API_KEY: test-key
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  arabic-validation:
    name: Arabic Text & Localization Testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Arabic processing dependencies
      run: |
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y fonts-noto-arabic language-pack-ar
    
    - name: Test Arabic text processing
      run: pytest testing/unit/test_arabic_processing.py -v
      env:
        LANG: ar_SA.UTF-8
        LC_ALL: ar_SA.UTF-8
    
    - name: Validate Arabic documentation
      run: |
        python -c "
        import glob
        for file in glob.glob('*arabic*.md') + glob.glob('documentation/**/*arabic*.md', recursive=True):
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()
                arabic_chars = any('\u0600' <= char <= '\u06FF' for char in content)
                print(f'✅ {file}: Arabic content detected' if arabic_chars else f'⚠️ {file}: No Arabic content')
        "

  performance-benchmarks:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust memory-profiler
    
    - name: Run performance benchmarks
      run: |
        python -c "
        import time
        import asyncio
        from app.services.arabic_analysis import analyze_arabic_feedback_agents
        
        async def benchmark():
            test_text = 'الخدمة ممتازة جداً وأنصح بها للجميع'
            start_time = time.time()
            try:
                result = await analyze_arabic_feedback_agents(test_text)
                end_time = time.time()
                processing_time = end_time - start_time
                print(f'✅ Agent analysis time: {processing_time:.2f}s')
                return processing_time < 3.0
            except Exception as e:
                print(f'⚠️ Agent analysis failed: {e}')
                return False
        
        success = asyncio.run(benchmark())
        exit(0 if success else 1)
        "

  build-and-package:
    name: Build & Package Application
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, testing, arabic-validation]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build application package
      run: |
        pip install build
        python -m build
    
    - name: Create deployment artifact
      run: |
        mkdir -p dist/deployment
        cp -r app/ dist/deployment/
        cp -r documentation/ dist/deployment/
        cp -r deployment/ dist/deployment/deploy/
        cp requirements.txt dist/deployment/
        cp QUICKSTART.md dist/deployment/
        
        # Create deployment manifest
        echo "artifact_version: $(date +%Y%m%d-%H%M%S)" > dist/deployment/MANIFEST.yml
        echo "git_commit: ${{ github.sha }}" >> dist/deployment/MANIFEST.yml
        echo "build_date: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> dist/deployment/MANIFEST.yml
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: arabic-voc-deployment
        path: dist/deployment/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: arabic-voc-deployment
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Integration with Replit or other staging environment
        echo "Deployment completed successfully"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-package, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: arabic-voc-deployment
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Production deployment logic
        echo "Production deployment completed"
    
    - name: Run post-deployment health checks
      run: |
        echo "Running health checks..."
        # Health check implementation
        echo "All health checks passed"